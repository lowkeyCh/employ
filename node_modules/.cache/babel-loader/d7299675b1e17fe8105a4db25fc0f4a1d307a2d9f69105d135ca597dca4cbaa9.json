{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport VantaBase, { VANTA } from './_base.js';\nimport { rn, ri, sample } from './helpers.js';\nlet THREE = typeof window == 'object' && window.THREE;\nconst defaultOptions = {\n  color: 0x005588,\n  shininess: 30,\n  waveHeight: 15,\n  waveSpeed: 1,\n  zoom: 1\n};\nclass Waves extends VantaBase {\n  static initClass() {\n    this.prototype.ww = 100;\n    this.prototype.hh = 80;\n    this.prototype.waveNoise = 4; // Choppiness of water\n  }\n  constructor(userOptions) {\n    THREE = userOptions.THREE || THREE;\n    super(userOptions);\n  }\n  getMaterial() {\n    const options = {\n      color: this.options.color,\n      shininess: this.options.shininess,\n      flatShading: true,\n      side: THREE.DoubleSide\n    };\n    return new THREE.MeshPhongMaterial(options);\n  }\n  onInit() {\n    let i, j;\n    const CELLSIZE = 18;\n    const material = this.getMaterial();\n    const geometry = new THREE.BufferGeometry();\n\n    // Add vertices\n    this.gg = [];\n    const points = [];\n    for (i = 0; i <= this.ww; i++) {\n      this.gg[i] = [];\n      for (j = 0; j <= this.hh; j++) {\n        const id = points.length;\n        const newVertex = new THREE.Vector3((i - this.ww * 0.5) * CELLSIZE, rn(0, this.waveNoise) - 10, (this.hh * 0.5 - j) * CELLSIZE);\n        points.push(newVertex);\n        this.gg[i][j] = id;\n      }\n    }\n    geometry.setFromPoints(points);\n\n    // Add faces\n    // a b\n    // c d <-- Looking from the bottom right point\n    const indices = [];\n    for (i = 1; i <= this.ww; i++) {\n      for (j = 1; j <= this.hh; j++) {\n        let face1, face2;\n        const d = this.gg[i][j];\n        const b = this.gg[i][j - 1];\n        const c = this.gg[i - 1][j];\n        const a = this.gg[i - 1][j - 1];\n        if (ri(0, 1)) {\n          face1 = [a, b, c];\n          face2 = [b, c, d];\n        } else {\n          face1 = [a, b, d];\n          face2 = [a, c, d];\n        }\n        indices.push(...face1, ...face2);\n      }\n    }\n    geometry.setIndex(indices);\n    this.plane = new THREE.Mesh(geometry, material);\n    this.scene.add(this.plane);\n\n    // WIREFRAME\n    // lightColor = 0x55aaee\n    // darkColor = 0x225577\n    // thresholdAngle = 2\n    // geo = new THREE.EdgesGeometry(geometry, thresholdAngle)\n    // mat = new THREE.LineBasicMaterial( { color: lightColor, linewidth: 2 } )\n    // @wireframe = new THREE.LineSegments( geo, mat )\n    // @scene.add( @wireframe )\n\n    // LIGHTS\n    const ambience = new THREE.AmbientLight(0xffffff, 0.9);\n    this.scene.add(ambience);\n    const pointLight = new THREE.PointLight(0xffffff, 0.9);\n    pointLight.position.set(-100, 250, -100);\n    this.scene.add(pointLight);\n\n    // CAMERA\n    this.camera = new THREE.PerspectiveCamera(35, this.width / this.height, 50, 10000);\n    const xOffset = -10;\n    const zOffset = -10;\n    this.cameraPosition = new THREE.Vector3(250 + xOffset, 200, 400 + zOffset);\n    this.cameraTarget = new THREE.Vector3(150 + xOffset, -30, 200 + zOffset);\n    this.camera.position.copy(this.cameraPosition);\n    this.scene.add(this.camera);\n  }\n  onUpdate() {\n    // Update options\n    let diff;\n    this.plane.material.color.set(this.options.color);\n    this.plane.material.shininess = this.options.shininess;\n    this.camera.ox = this.cameraPosition.x / this.options.zoom;\n    this.camera.oy = this.cameraPosition.y / this.options.zoom;\n    this.camera.oz = this.cameraPosition.z / this.options.zoom;\n    if (this.controls != null) {\n      this.controls.update();\n    }\n    const c = this.camera;\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\n      diff = c.tx - c.position.x;\n      c.position.x += diff * 0.02;\n    }\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\n      diff = c.ty - c.position.y;\n      c.position.y += diff * 0.02;\n    }\n    if (Math.abs(c.tz - c.position.z) > 0.01) {\n      diff = c.tz - c.position.z;\n      c.position.z += diff * 0.02;\n    }\n    c.lookAt(this.cameraTarget);\n\n    // Fix flickering problems\n    // c.near = Math.max((c.position.y * 0.5) - 20, 1);\n    // c.updateMatrix();\n\n    // WAVES\n    this.oy = this.oy || {};\n    for (let i = 0; i < this.plane.geometry.attributes.position.array.length; i += 3) {\n      const v = {\n        x: this.plane.geometry.attributes.position.array[i],\n        y: this.plane.geometry.attributes.position.array[i + 1],\n        z: this.plane.geometry.attributes.position.array[i + 2],\n        oy: this.oy[i]\n      };\n      if (!v.oy) {\n        // INIT\n        this.oy[i] = v.y;\n      } else {\n        const s = this.options.waveSpeed;\n        const crossChop = Math.sqrt(s) * Math.cos(-v.x - v.z * 0.7); // + s * (i % 229) / 229 * 5\n        const delta = Math.sin(s * this.t * 0.02 - s * v.x * 0.025 + s * v.z * 0.015 + crossChop);\n        const trochoidDelta = Math.pow(delta + 1, 2) / 4;\n        v.y = v.oy + trochoidDelta * this.options.waveHeight;\n        this.plane.geometry.attributes.position.array[i + 1] = v.y;\n      }\n    }\n\n    // @wireframe.geometry.vertices[i].y = v.y\n\n    this.plane.geometry.attributes.position.setUsage(THREE.DynamicDrawUsage);\n    this.plane.geometry.computeVertexNormals();\n    this.plane.geometry.attributes.position.needsUpdate = true;\n\n    // @scene.remove( @wireframe )\n    // geo = new THREE.EdgesGeometry(@plane.geometry)\n    // mat = new THREE.LineBasicMaterial( { color: 0x55aaee, linewidth: 2} )\n    // @wireframe = new THREE.LineSegments( geo, mat )\n    // @scene.add( @wireframe )\n\n    if (this.wireframe) {\n      this.wireframe.geometry.fromGeometry(this.plane.geometry);\n      this.wireframe.geometry.computeFaceNormals();\n    }\n  }\n  onMouseMove(x, y) {\n    const c = this.camera;\n    if (!c.oy) {\n      c.oy = c.position.y;\n      c.ox = c.position.x;\n      c.oz = c.position.z;\n    }\n    c.tx = c.ox + (x - 0.5) * 100 / this.options.zoom;\n    c.ty = c.oy + (y - 0.5) * -100 / this.options.zoom;\n    return c.tz = c.oz + (x - 0.5) * -50 / this.options.zoom;\n  }\n}\nWaves.prototype.defaultOptions = defaultOptions;\nWaves.initClass();\nexport default VANTA.register('WAVES', Waves);","map":{"version":3,"names":["VantaBase","VANTA","rn","ri","sample","THREE","window","defaultOptions","color","shininess","waveHeight","waveSpeed","zoom","Waves","initClass","prototype","ww","hh","waveNoise","constructor","userOptions","getMaterial","options","flatShading","side","DoubleSide","MeshPhongMaterial","onInit","i","j","CELLSIZE","material","geometry","BufferGeometry","gg","points","id","length","newVertex","Vector3","push","setFromPoints","indices","face1","face2","d","b","c","a","setIndex","plane","Mesh","scene","add","ambience","AmbientLight","pointLight","PointLight","position","set","camera","PerspectiveCamera","width","height","xOffset","zOffset","cameraPosition","cameraTarget","copy","onUpdate","diff","ox","x","oy","y","oz","z","controls","update","Math","abs","tx","ty","tz","lookAt","attributes","array","v","s","crossChop","sqrt","cos","delta","sin","t","trochoidDelta","pow","setUsage","DynamicDrawUsage","computeVertexNormals","needsUpdate","wireframe","fromGeometry","computeFaceNormals","onMouseMove","register"],"sources":["C:/Users/17703/Desktop/employment/node_modules/vanta/src/vanta.waves.js"],"sourcesContent":["import VantaBase, { VANTA } from './_base.js'\r\nimport {rn,ri,sample} from './helpers.js'\r\n\r\nlet THREE = (typeof window == 'object' && window.THREE)\r\n\r\nconst defaultOptions = {\r\n  color: 0x005588,\r\n  shininess: 30,\r\n  waveHeight: 15,\r\n  waveSpeed: 1,\r\n  zoom: 1\r\n}\r\n\r\nclass Waves extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.ww = 100;\r\n    this.prototype.hh = 80;\r\n    this.prototype.waveNoise = 4; // Choppiness of water\r\n  }\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    super(userOptions)\r\n  }\r\n\r\n  getMaterial() {\r\n    const options = {\r\n      color: this.options.color,\r\n      shininess: this.options.shininess,\r\n      flatShading: true,\r\n      side: THREE.DoubleSide\r\n    };\r\n    return new THREE.MeshPhongMaterial(options);\r\n  }\r\n\r\n  onInit() {\r\n    let i, j;\r\n    const CELLSIZE = 18;\r\n    const material = this.getMaterial();\r\n    const geometry = new THREE.BufferGeometry();\r\n\r\n    // Add vertices\r\n    this.gg = [];\r\n    const points = [];\r\n    for (i=0; i<=this.ww; i++){\r\n      this.gg[i] = [];\r\n      for (j=0; j<=this.hh; j++){\r\n        const id = points.length;\r\n        const newVertex = new THREE.Vector3(\r\n          (i - (this.ww * 0.5)) * CELLSIZE,\r\n          rn(0, this.waveNoise) - 10,\r\n          ((this.hh * 0.5) - j) * CELLSIZE\r\n        );\r\n        points.push(newVertex);\r\n        this.gg[i][j] = id;\r\n      }\r\n    }\r\n    geometry.setFromPoints(points);\r\n\r\n    // Add faces\r\n    // a b\r\n    // c d <-- Looking from the bottom right point\r\n    const indices = [];\r\n    for (i=1; i<=this.ww; i++){\r\n      for (j=1; j<=this.hh; j++){\r\n        let face1, face2\r\n        const d = this.gg[i][j]\r\n        const b = this.gg[i][j-1]\r\n        const c = this.gg[i-1][j]\r\n        const a = this.gg[i-1][j-1]\r\n        if (ri(0,1)) {\r\n          face1 = [a, b, c]\r\n          face2 = [b, c, d]\r\n        } else {\r\n          face1 = [a, b, d]\r\n          face2 = [a, c, d]\r\n        }\r\n        indices.push(...face1, ...face2)\r\n      }\r\n    }\r\n    geometry.setIndex(indices);\r\n\r\n    this.plane = new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.plane);\r\n\r\n    // WIREFRAME\r\n    // lightColor = 0x55aaee\r\n    // darkColor = 0x225577\r\n    // thresholdAngle = 2\r\n    // geo = new THREE.EdgesGeometry(geometry, thresholdAngle)\r\n    // mat = new THREE.LineBasicMaterial( { color: lightColor, linewidth: 2 } )\r\n    // @wireframe = new THREE.LineSegments( geo, mat )\r\n    // @scene.add( @wireframe )\r\n\r\n    // LIGHTS\r\n    const ambience = new THREE.AmbientLight( 0xffffff, 0.9 );\r\n    this.scene.add(ambience);\r\n\r\n    const pointLight = new THREE.PointLight( 0xffffff, 0.9 );\r\n    pointLight.position.set(-100,250,-100);\r\n    this.scene.add(pointLight);\r\n\r\n    // CAMERA\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      35,\r\n      this.width / this.height,\r\n      50, 10000);\r\n\r\n    const xOffset = -10;\r\n    const zOffset = -10;\r\n    this.cameraPosition = new THREE.Vector3( 250+xOffset, 200, 400+zOffset );\r\n    this.cameraTarget = new THREE.Vector3( 150+xOffset, -30, 200+zOffset );\r\n    this.camera.position.copy(this.cameraPosition);\r\n    this.scene.add(this.camera);\r\n  }\r\n\r\n  onUpdate() {\r\n    // Update options\r\n    let diff;\r\n    this.plane.material.color.set(this.options.color)\r\n    this.plane.material.shininess = this.options.shininess\r\n    this.camera.ox = this.cameraPosition.x / this.options.zoom\r\n    this.camera.oy = this.cameraPosition.y / this.options.zoom\r\n    this.camera.oz = this.cameraPosition.z / this.options.zoom\r\n\r\n    if (this.controls != null) {\r\n      this.controls.update()\r\n    }\r\n\r\n    const c = this.camera\r\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\r\n      diff = c.tx - c.position.x\r\n      c.position.x += diff * 0.02\r\n    }\r\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\r\n      diff = c.ty - c.position.y\r\n      c.position.y += diff * 0.02\r\n    }\r\n    if (Math.abs(c.tz - c.position.z) > 0.01) {\r\n      diff = c.tz - c.position.z\r\n      c.position.z += diff * 0.02\r\n    }\r\n\r\n    c.lookAt( this.cameraTarget )\r\n\r\n    // Fix flickering problems\r\n    // c.near = Math.max((c.position.y * 0.5) - 20, 1);\r\n    // c.updateMatrix();\r\n\r\n    // WAVES\r\n    this.oy = this.oy || {}\r\n    for (let i = 0; i < this.plane.geometry.attributes.position.array.length; i += 3) {\r\n      const v = {\r\n        x: this.plane.geometry.attributes.position.array[i],\r\n        y: this.plane.geometry.attributes.position.array[i + 1],\r\n        z: this.plane.geometry.attributes.position.array[i + 2],\r\n        oy: this.oy[i]\r\n      };\r\n      if (!v.oy) { // INIT\r\n        this.oy[i] = v.y\r\n      } else {\r\n        const s = this.options.waveSpeed\r\n        const crossChop = Math.sqrt(s) * Math.cos(-v.x - (v.z*0.7)) // + s * (i % 229) / 229 * 5\r\n        const delta = Math.sin((((s*this.t*0.02) - (s*v.x*0.025)) + (s*v.z*0.015) + crossChop))\r\n        const trochoidDelta = Math.pow(delta + 1, 2) / 4\r\n        v.y = v.oy + (trochoidDelta * this.options.waveHeight)\r\n        this.plane.geometry.attributes.position.array[i + 1] = v.y\r\n      }\r\n    }\r\n\r\n      // @wireframe.geometry.vertices[i].y = v.y\r\n\r\n    this.plane.geometry.attributes.position.setUsage(THREE.DynamicDrawUsage)\r\n    this.plane.geometry.computeVertexNormals()\r\n    this.plane.geometry.attributes.position.needsUpdate = true\r\n\r\n    // @scene.remove( @wireframe )\r\n    // geo = new THREE.EdgesGeometry(@plane.geometry)\r\n    // mat = new THREE.LineBasicMaterial( { color: 0x55aaee, linewidth: 2} )\r\n    // @wireframe = new THREE.LineSegments( geo, mat )\r\n    // @scene.add( @wireframe )\r\n\r\n    if (this.wireframe) {\r\n      this.wireframe.geometry.fromGeometry(this.plane.geometry)\r\n      this.wireframe.geometry.computeFaceNormals()\r\n    }\r\n  }\r\n\r\n  onMouseMove(x,y) {\r\n    const c = this.camera;\r\n    if (!c.oy) {\r\n      c.oy = c.position.y;\r\n      c.ox = c.position.x;\r\n      c.oz = c.position.z;\r\n    }\r\n    c.tx = c.ox + (((x-0.5) * 100) / this.options.zoom);\r\n    c.ty = c.oy + (((y-0.5) * -100) / this.options.zoom);\r\n    return c.tz = c.oz + (((x-0.5) * -50) / this.options.zoom);\r\n  }\r\n}\r\n\r\nWaves.prototype.defaultOptions = defaultOptions\r\nWaves.initClass()\r\nexport default VANTA.register('WAVES', Waves)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}