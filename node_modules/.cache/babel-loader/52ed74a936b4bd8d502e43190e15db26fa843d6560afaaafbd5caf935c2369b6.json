{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport VantaBase, { VANTA } from './_base.js';\nimport { rn, getBrightness } from './helpers.js';\nconst win = typeof window == 'object';\nlet THREE = win && window.THREE;\nclass Effect extends VantaBase {\n  static initClass() {\n    this.prototype.defaultOptions = {\n      color: 0xff3f81,\n      color2: 0xffffff,\n      size: 1,\n      backgroundColor: 0x23153c,\n      points: 10,\n      maxDistance: 20,\n      spacing: 15,\n      showDots: true\n    };\n  }\n  constructor(userOptions) {\n    THREE = userOptions.THREE || THREE;\n    super(userOptions);\n  }\n\n  // onInit() {\n  //   this.geometry = new THREE.BoxGeometry( 10, 10, 10 );\n  //   this.material = new THREE.MeshLambertMaterial({\n  //     color: this.options.color,\n  //     emissive: this.options.color,\n  //     emissiveIntensity: 0.75\n  //   });\n  //   this.cube = new THREE.Mesh( this.geometry, this.material );\n  //   this.scene.add(this.cube);\n\n  //   const c = this.camera = new THREE.PerspectiveCamera( 75, this.width/this.height, 0.1, 1000 );\n  //   c.position.z = 30;\n  //   c.lookAt(0,0,0);\n  //   this.scene.add(c);\n\n  //   const light = new THREE.HemisphereLight( 0xffffff, this.options.backgroundColor , 1 );\n  //   this.scene.add(light);\n  // }\n\n  // onUpdate() {\n  //   this.cube.rotation.x += 0.01;\n  //   this.cube.rotation.y += 0.01;\n  // }\n\n  genPoint(x, y, z) {\n    let sphere;\n    if (!this.points) {\n      this.points = [];\n    }\n    if (this.options.showDots) {\n      const geometry = new THREE.SphereGeometry(0.25, 12, 12); // radius, width, height\n      const material = new THREE.MeshLambertMaterial({\n        color: this.options.color\n      });\n      sphere = new THREE.Mesh(geometry, material);\n    } else {\n      sphere = new THREE.Object3D();\n    }\n    this.cont.add(sphere);\n    sphere.ox = x;\n    sphere.oy = y;\n    sphere.oz = z;\n    sphere.position.set(x, y, z);\n    sphere.r = 0; // rotation rate\n    return this.points.push(sphere);\n  }\n  onInit() {\n    this.cont = new THREE.Group();\n    this.cont.position.set(-50, -20, 0);\n    this.scene.add(this.cont);\n    let n = this.options.points;\n    let {\n      spacing\n    } = this.options;\n    const numPoints = n * n * 2;\n    this.linePositions = new Float32Array(numPoints * numPoints * 3);\n    this.lineColors = new Float32Array(numPoints * numPoints * 3);\n    const colorB = getBrightness(new THREE.Color(this.options.color));\n    const bgB = getBrightness(new THREE.Color(this.options.backgroundColor));\n    this.blending = colorB > bgB ? 'additive' : 'subtractive';\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(this.linePositions, 3).setUsage(THREE.DynamicDrawUsage));\n    geometry.setAttribute('color', new THREE.BufferAttribute(this.lineColors, 3).setUsage(THREE.DynamicDrawUsage));\n    geometry.computeBoundingSphere();\n    geometry.setDrawRange(0, 0);\n    const material = new THREE.LineBasicMaterial({\n      vertexColors: THREE.VertexColors,\n      blending: this.blending === 'additive' ? THREE.AdditiveBlending : null,\n      // blending: THREE.SubtractiveBlending\n      transparent: true\n    });\n    // blending: THREE.CustomBlending\n    // blendEquation: THREE.SubtractEquation\n    // blendSrc: THREE.SrcAlphaFactor\n    // blendDst: THREE.OneMinusSrcAlphaFactor\n\n    this.linesMesh = new THREE.LineSegments(geometry, material);\n    this.cont.add(this.linesMesh);\n    for (let i = 0; i <= n; i++) {\n      for (let j = 0; j <= n; j++) {\n        const y = 0;\n        const x = (i - n / 2) * spacing;\n        let z = (j - n / 2) * spacing;\n        // if (i % 2) { z += spacing * 0.5 } // offset\n\n        // nexusX = Math.round(x / 20) * 20\n        // nexusZ = Math.round(z / 20) * 20\n        // x += (nexusX - x) * 0.01\n        // z += (nexusZ - z) * 0.01\n        this.genPoint(x, y, z);\n        // this.genPoint(x + ri(-5,5), y, z + ri(-5,5))\n      }\n    }\n\n    //  # radius\n    //   width, # width\n    //   rn(0,1000), # startAng\n    //   rn(1,6), # ang\n    //   rn(0, 50/(radius+1) + 5) + 5/width/(radius+0.5), # y\n    //   Math.max(-rn(0.5,2), rn(1, 50-radius/2) - radius/2) * 0.25 # speed\n    // )\n\n    // PerspectiveCamera( fov, aspect, near, far )\n    this.camera = new THREE.PerspectiveCamera(20, this.width / this.height, 0.01, 10000);\n    this.camera.position.set(50, 100, 150);\n    this.scene.add(this.camera);\n\n    // ambience = new THREE.AmbientLight(0xffffff, 0.01)\n    // @scene.add(ambience)\n\n    // @pointLight = new THREE.PointLight(0xFFFFFF, 0.01)\n    // @pointLight.position.set(0, 150, 200)\n    // @scene.add( @pointLight )\n\n    const ambience = new THREE.AmbientLight(0xffffff, 0.75);\n    this.scene.add(ambience);\n    this.spot = new THREE.SpotLight(0xFFFFFF, 1);\n    this.spot.position.set(0, 200, 0);\n    this.spot.distance = 400;\n    this.spot.target = this.cont;\n    this.scene.add(this.spot);\n\n    // LINES BALL\n    this.cont2 = new THREE.Group();\n    this.cont2.position.set(0, 15, 0);\n    this.scene.add(this.cont2);\n    const material2 = new THREE.LineBasicMaterial({\n      color: this.options.color2\n    });\n    const linePoints = [];\n    for (let i = 0; i < 80; i++) {\n      const f1 = rn(18, 24);\n      const f2 = f1 + rn(1, 6);\n      // https://math.stackexchange.com/questions/1585975/how-to-generate-random-points-on-a-sphere\n      const z = rn(-1, 1);\n      const r = Math.sqrt(1 - z * z);\n      const theta = rn(0, Math.PI * 2);\n      const y = Math.sin(theta) * r;\n      const x = Math.cos(theta) * r;\n      linePoints.push(new THREE.Vector3(x * f1, y * f1, z * f1));\n      linePoints.push(new THREE.Vector3(x * f2, y * f2, z * f2));\n    }\n    const linesGeo = new THREE.BufferGeometry().setFromPoints(linePoints);\n    this.linesMesh2 = new THREE.LineSegments(linesGeo, material2);\n    this.linesMesh2.position.set(0, 0, 0);\n    this.cont2.add(this.linesMesh2);\n\n    // Poles\n    const material3 = new THREE.LineBasicMaterial({\n      color: this.options.color2,\n      linewidth: 2\n    });\n    const linePoints3 = [];\n    linePoints3.push(new THREE.Vector3(0, 30, 0));\n    linePoints3.push(new THREE.Vector3(0, -30, 0));\n    const num = 4;\n    for (let i = 0; i < num; i++) {\n      let x = 0.15 * Math.cos(i / num * Math.PI * 2),\n        z = 0.15 * Math.sin(i / num * Math.PI * 2);\n      let heights = [17.9, 12, 8, 5, 3, 2, 1.5, 1.1, 0.8, 0.6, 0.45, 0.3, 0.2, 0.1, 0.05, 0.03, 0.02, 0.01];\n      for (let j = 0; j < heights.length; j++) {\n        let h = heights[j],\n          r = 6 * (j + 1);\n        linePoints3.push(new THREE.Vector3(x * r, h, z * r));\n        linePoints3.push(new THREE.Vector3(x * r, -h, z * r));\n      }\n    }\n    const linesGeo3 = new THREE.BufferGeometry().setFromPoints(linePoints3);\n    this.linesMesh3 = new THREE.LineSegments(linesGeo3, material3);\n    this.linesMesh3.position.set(0, 0, 0);\n    this.cont2.add(this.linesMesh3);\n\n    // GLOBE\n    // https://stackoverflow.com/questions/20153705/three-js-wireframe-material-all-polygons-vs-just-edges\n    const wireMat = new THREE.LineBasicMaterial({\n      color: this.options.color\n    });\n    const sphereGeom = new THREE.SphereGeometry(18 * this.options.size, 18, 14);\n    const edges = new THREE.EdgesGeometry(sphereGeom);\n    this.sphere = new THREE.LineSegments(edges, wireMat);\n    this.sphere.position.set(0, 0, 0);\n    this.cont2.add(this.sphere);\n    this.cont2.rotation.x = -0.25;\n  }\n  onUpdate() {\n    let diff;\n    if (this.helper != null) {\n      this.helper.update();\n    }\n    if (this.controls != null) {\n      this.controls.update();\n    }\n    const c = this.camera;\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\n      diff = c.tx - c.position.x;\n      c.position.x += diff * 0.02;\n    }\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\n      diff = c.ty - c.position.y;\n      c.position.y += diff * 0.02;\n    }\n    if (win && window.innerWidth < 480) {\n      c.lookAt(new THREE.Vector3(-10, 0, 0));\n    } else if (win && window.innerWidth < 720) {\n      c.lookAt(new THREE.Vector3(-20, 0, 0));\n    } else c.lookAt(new THREE.Vector3(-40, 0, 0));\n    // c.near = 0.01\n    // c.updateProjectionMatrix()\n\n    let vertexpos = 0;\n    let colorpos = 0;\n    let numConnected = 0;\n    const bgColor = new THREE.Color(this.options.backgroundColor);\n    const color = new THREE.Color(this.options.color);\n    const color2 = new THREE.Color(this.options.color2);\n    const diffColor = color.clone().sub(bgColor);\n    if (this.rayCaster) {\n      this.rayCaster.setFromCamera(new THREE.Vector2(this.rcMouseX, this.rcMouseY), this.camera);\n    }\n    if (this.linesMesh2) {\n      this.linesMesh2.rotation.z += 0.002;\n      this.linesMesh2.rotation.x += 0.0008;\n      this.linesMesh2.rotation.y += 0.0005;\n    }\n    if (this.sphere) {\n      this.sphere.rotation.y += 0.002;\n      this.linesMesh3.rotation.y -= 0.004;\n    }\n\n    // # TEMPORARY RAY DRAWING\n    // pointA = @camera.position\n    // direction = @rayCaster.ray.direction\n    // direction.normalize()\n    // distance = 1000000 # at what distance to determine pointB\n    // pointB = new THREE.Vector3()\n    // pointB.addVectors( pointA, direction.multiplyScalar( distance ) )\n    // geometry = new THREE.Geometry()\n    // geometry.vertices.push( pointA )\n    // geometry.vertices.push( pointB )\n    // material = new THREE.LineBasicMaterial( { color : 0xffffff } )\n    // line = new THREE.Line( geometry, material )\n    // @scene.add( line )\n\n    for (let i = 0; i < this.points.length; i++) {\n      let dist, distToMouse;\n      const p = this.points[i];\n      // p.position.y += Math.sin(@t * 0.005 - 0.02 * p.ox + 0.015 * p.oz) * 0.02\n\n      if (this.rayCaster) {\n        distToMouse = this.rayCaster.ray.distanceToPoint(p.position);\n      } else {\n        distToMouse = 1000;\n      }\n      const distClamp = distToMouse.clamp(5, 15);\n      p.scale.z = ((15 - distClamp) * 0.25).clamp(1, 100);\n      p.scale.x = p.scale.y = p.scale.z;\n\n      // if (p.r !== 0) {\n      //   let ang = Math.atan2( p.position.z, p.position.x )\n      //   dist = Math.sqrt( (p.position.z * p.position.z) + (p.position.x * p.position.x) )\n      //   // ang += 0.0005 * p.r\n      //   p.position.x = dist * Math.cos(ang)\n      //   p.position.z = dist * Math.sin(ang)\n      // }\n\n      p.position.y = 2 * Math.sin(p.position.x / 10 + this.t * 0.01 + p.position.z / 10 * 0.5);\n\n      // p.position.x += Math.sin(@t * 0.01 + p.position.y) * 0.02\n      // p.position.z += Math.sin(@t * 0.01 - p.position.y) * 0.02\n\n      for (let j = i; j < this.points.length; j++) {\n        const p2 = this.points[j];\n        const dx = p.position.x - p2.position.x;\n        const dy = p.position.y - p2.position.y;\n        const dz = p.position.z - p2.position.z;\n        dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        if (dist < this.options.maxDistance) {\n          let lineColor;\n          let alpha = (1.0 - dist / this.options.maxDistance) * 2;\n          alpha = alpha.clamp(0, 1);\n          if (this.blending === 'additive') {\n            lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha);\n          } else {\n            lineColor = bgColor.clone().lerp(color, alpha);\n          }\n          // if @blending == 'subtractive'\n          //   lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\n\n          this.linePositions[vertexpos++] = p.position.x;\n          this.linePositions[vertexpos++] = p.position.y;\n          this.linePositions[vertexpos++] = p.position.z;\n          this.linePositions[vertexpos++] = p2.position.x;\n          this.linePositions[vertexpos++] = p2.position.y;\n          this.linePositions[vertexpos++] = p2.position.z;\n          this.lineColors[colorpos++] = lineColor.r;\n          this.lineColors[colorpos++] = lineColor.g;\n          this.lineColors[colorpos++] = lineColor.b;\n          this.lineColors[colorpos++] = lineColor.r;\n          this.lineColors[colorpos++] = lineColor.g;\n          this.lineColors[colorpos++] = lineColor.b;\n          numConnected++;\n        }\n      }\n    }\n    this.linesMesh.geometry.setDrawRange(0, numConnected * 2);\n    this.linesMesh.geometry.attributes.position.needsUpdate = true;\n    this.linesMesh.geometry.attributes.color.needsUpdate = true;\n    // @pointCloud.geometry.attributes.position.needsUpdate = true\n\n    // Update other colors\n    this.sphere.material.color.set(color);\n    this.linesMesh2.material.color.set(color2);\n    this.linesMesh3.material.color.set(color2);\n    return this.t * 0.001;\n  }\n  // @cont.rotation.x += Math.sin(t) * 0.0001\n  // @cont.rotation.z += Math.cos(t) * 0.00007\n\n  onMouseMove(x, y) {\n    const c = this.camera;\n    if (!c.oy) {\n      c.oy = c.position.y;\n      c.ox = c.position.x;\n      c.oz = c.position.z;\n    }\n    const ang = Math.atan2(c.oz, c.ox);\n    const dist = Math.sqrt(c.oz * c.oz + c.ox * c.ox);\n    const tAng = ang + (x - 0.5) * 1.5 * (this.options.mouseCoeffX || 1);\n    c.tz = dist * Math.sin(tAng);\n    c.tx = dist * Math.cos(tAng);\n    c.ty = c.oy + (y - 0.5) * 80 * (this.options.mouseCoeffY || 1);\n    if (!this.rayCaster) {\n      // this.rayCaster = new THREE.Raycaster()\n    }\n    this.rcMouseX = x * 2 - 1;\n    this.rcMouseY = -x * 2 + 1;\n  }\n  onRestart() {\n    this.scene.remove(this.linesMesh);\n    this.points = [];\n  }\n}\nEffect.initClass();\nexport default VANTA.register('GLOBE', Effect);","map":{"version":3,"names":["VantaBase","VANTA","rn","getBrightness","win","window","THREE","Effect","initClass","prototype","defaultOptions","color","color2","size","backgroundColor","points","maxDistance","spacing","showDots","constructor","userOptions","genPoint","x","y","z","sphere","options","geometry","SphereGeometry","material","MeshLambertMaterial","Mesh","Object3D","cont","add","ox","oy","oz","position","set","r","push","onInit","Group","scene","n","numPoints","linePositions","Float32Array","lineColors","colorB","Color","bgB","blending","BufferGeometry","setAttribute","BufferAttribute","setUsage","DynamicDrawUsage","computeBoundingSphere","setDrawRange","LineBasicMaterial","vertexColors","VertexColors","AdditiveBlending","transparent","linesMesh","LineSegments","i","j","camera","PerspectiveCamera","width","height","ambience","AmbientLight","spot","SpotLight","distance","target","cont2","material2","linePoints","f1","f2","Math","sqrt","theta","PI","sin","cos","Vector3","linesGeo","setFromPoints","linesMesh2","material3","linewidth","linePoints3","num","heights","length","h","linesGeo3","linesMesh3","wireMat","sphereGeom","edges","EdgesGeometry","rotation","onUpdate","diff","helper","update","controls","c","abs","tx","ty","innerWidth","lookAt","vertexpos","colorpos","numConnected","bgColor","diffColor","clone","sub","rayCaster","setFromCamera","Vector2","rcMouseX","rcMouseY","dist","distToMouse","p","ray","distanceToPoint","distClamp","clamp","scale","t","p2","dx","dy","dz","lineColor","alpha","lerp","g","b","attributes","needsUpdate","onMouseMove","ang","atan2","tAng","mouseCoeffX","tz","mouseCoeffY","onRestart","remove","register"],"sources":["E:/专业综合实践与训练/employment/node_modules/vanta/src/vanta.globe.js"],"sourcesContent":["import VantaBase, {VANTA} from './_base.js'\r\nimport {rn, getBrightness} from './helpers.js'\r\n\r\nconst win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\n\r\nclass Effect extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.defaultOptions = {\r\n      color: 0xff3f81,\r\n      color2: 0xffffff,\r\n      size: 1,\r\n      backgroundColor: 0x23153c,\r\n      points: 10,\r\n      maxDistance: 20,\r\n      spacing: 15,\r\n      showDots: true\r\n    }\r\n  }\r\n\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    super(userOptions)\r\n  }\r\n\r\n  // onInit() {\r\n  //   this.geometry = new THREE.BoxGeometry( 10, 10, 10 );\r\n  //   this.material = new THREE.MeshLambertMaterial({\r\n  //     color: this.options.color,\r\n  //     emissive: this.options.color,\r\n  //     emissiveIntensity: 0.75\r\n  //   });\r\n  //   this.cube = new THREE.Mesh( this.geometry, this.material );\r\n  //   this.scene.add(this.cube);\r\n\r\n  //   const c = this.camera = new THREE.PerspectiveCamera( 75, this.width/this.height, 0.1, 1000 );\r\n  //   c.position.z = 30;\r\n  //   c.lookAt(0,0,0);\r\n  //   this.scene.add(c);\r\n\r\n  //   const light = new THREE.HemisphereLight( 0xffffff, this.options.backgroundColor , 1 );\r\n  //   this.scene.add(light);\r\n  // }\r\n\r\n  // onUpdate() {\r\n  //   this.cube.rotation.x += 0.01;\r\n  //   this.cube.rotation.y += 0.01;\r\n  // }\r\n\r\n  genPoint(x, y, z) {\r\n    let sphere\r\n    if (!this.points) { this.points = [] }\r\n\r\n    if (this.options.showDots) {\r\n      const geometry = new THREE.SphereGeometry( 0.25, 12, 12 ) // radius, width, height\r\n      const material = new THREE.MeshLambertMaterial({\r\n        color: this.options.color})\r\n      sphere = new THREE.Mesh( geometry, material )\r\n    } else {\r\n      sphere = new THREE.Object3D()\r\n    }\r\n    this.cont.add( sphere )\r\n    sphere.ox = x\r\n    sphere.oy = y\r\n    sphere.oz = z\r\n    sphere.position.set(x,y,z)\r\n    sphere.r = 0 // rotation rate\r\n    return this.points.push(sphere)\r\n  }\r\n\r\n  onInit() {\r\n    this.cont = new THREE.Group()\r\n    this.cont.position.set(-50,-20,0)\r\n    this.scene.add(this.cont)\r\n\r\n    let n = this.options.points\r\n    let { spacing } = this.options\r\n\r\n    const numPoints = n * n * 2\r\n    this.linePositions = new Float32Array( numPoints * numPoints * 3 )\r\n    this.lineColors = new Float32Array( numPoints * numPoints * 3 )\r\n\r\n    const colorB = getBrightness(new THREE.Color(this.options.color))\r\n    const bgB = getBrightness(new THREE.Color(this.options.backgroundColor))\r\n    this.blending =  colorB > bgB ? 'additive' : 'subtractive'\r\n\r\n    const geometry = new THREE.BufferGeometry();\r\n    geometry.setAttribute('position',\r\n      new THREE.BufferAttribute(this.linePositions, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.setAttribute('color',\r\n      new THREE.BufferAttribute(this.lineColors, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.computeBoundingSphere()\r\n    geometry.setDrawRange( 0, 0 )\r\n    const material = new THREE.LineBasicMaterial({\r\n      vertexColors: THREE.VertexColors,\r\n      blending: this.blending === 'additive' ? THREE.AdditiveBlending : null,\r\n      // blending: THREE.SubtractiveBlending\r\n      transparent: true\r\n    });\r\n      // blending: THREE.CustomBlending\r\n      // blendEquation: THREE.SubtractEquation\r\n      // blendSrc: THREE.SrcAlphaFactor\r\n      // blendDst: THREE.OneMinusSrcAlphaFactor\r\n\r\n    this.linesMesh = new THREE.LineSegments( geometry, material )\r\n    this.cont.add( this.linesMesh )\r\n\r\n    for (let i = 0; i<=n; i++) {\r\n      for (let j = 0; j<=n; j++) {\r\n        const y = 0\r\n        const x = ((i - (n/2)) * spacing)\r\n        let z = ((j - (n/2)) * spacing)\r\n        // if (i % 2) { z += spacing * 0.5 } // offset\r\n\r\n        // nexusX = Math.round(x / 20) * 20\r\n        // nexusZ = Math.round(z / 20) * 20\r\n        // x += (nexusX - x) * 0.01\r\n        // z += (nexusZ - z) * 0.01\r\n        this.genPoint(x, y, z)\r\n        // this.genPoint(x + ri(-5,5), y, z + ri(-5,5))\r\n      }\r\n    }\r\n\r\n    //  # radius\r\n    //   width, # width\r\n    //   rn(0,1000), # startAng\r\n    //   rn(1,6), # ang\r\n    //   rn(0, 50/(radius+1) + 5) + 5/width/(radius+0.5), # y\r\n    //   Math.max(-rn(0.5,2), rn(1, 50-radius/2) - radius/2) * 0.25 # speed\r\n    // )\r\n\r\n    // PerspectiveCamera( fov, aspect, near, far )\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      20,\r\n      this.width / this.height,\r\n      0.01, 10000);\r\n    this.camera.position.set(50, 100, 150)\r\n    this.scene.add( this.camera )\r\n\r\n    // ambience = new THREE.AmbientLight(0xffffff, 0.01)\r\n    // @scene.add(ambience)\r\n\r\n    // @pointLight = new THREE.PointLight(0xFFFFFF, 0.01)\r\n    // @pointLight.position.set(0, 150, 200)\r\n    // @scene.add( @pointLight )\r\n\r\n    const ambience = new THREE.AmbientLight(0xffffff, 0.75)\r\n    this.scene.add(ambience)\r\n\r\n    this.spot = new THREE.SpotLight(0xFFFFFF, 1)\r\n    this.spot.position.set(0, 200, 0)\r\n    this.spot.distance = 400\r\n    this.spot.target = this.cont\r\n    this.scene.add(this.spot)\r\n\r\n\r\n    // LINES BALL\r\n    this.cont2 = new THREE.Group()\r\n    this.cont2.position.set(0, 15, 0)\r\n    this.scene.add(this.cont2)\r\n\r\n    const material2 = new THREE.LineBasicMaterial({ color: this.options.color2 })\r\n    const linePoints = []\r\n    for (let i = 0; i < 80; i ++) {\r\n      const f1 = rn(18,24)\r\n      const f2 = f1 + rn(1,6)\r\n      // https://math.stackexchange.com/questions/1585975/how-to-generate-random-points-on-a-sphere\r\n      const z = rn(-1,1)\r\n      const r = Math.sqrt(1 - z*z)\r\n      const theta = rn(0, Math.PI * 2)\r\n      const y = Math.sin(theta) * r\r\n      const x = Math.cos(theta) * r\r\n      linePoints.push(new THREE.Vector3( x*f1, y*f1, z*f1) )\r\n      linePoints.push(new THREE.Vector3( x*f2, y*f2, z*f2) )\r\n    }\r\n    const linesGeo = new THREE.BufferGeometry().setFromPoints( linePoints )\r\n    this.linesMesh2 = new THREE.LineSegments( linesGeo, material2 )\r\n    this.linesMesh2.position.set(0, 0, 0)\r\n    this.cont2.add(this.linesMesh2)\r\n\r\n    // Poles\r\n    const material3 = new THREE.LineBasicMaterial( {\r\n      color: this.options.color2,\r\n      linewidth: 2,\r\n    } )\r\n    const linePoints3 = []\r\n    linePoints3.push(new THREE.Vector3( 0, 30, 0))\r\n    linePoints3.push(new THREE.Vector3( 0, -30, 0))\r\n    const num = 4\r\n    for (let i = 0; i < num; i ++) {\r\n      let x = 0.15 * Math.cos(i/num*Math.PI*2),\r\n          z = 0.15 * Math.sin(i/num*Math.PI*2)\r\n      let heights = [17.9,12,8,5,3,2,1.5,1.1,0.8,0.6,0.45,0.3,0.2,0.1,0.05,0.03,0.02,0.01]\r\n      for (let j = 0; j<heights.length; j++) {\r\n        let h = heights[j], r = 6*(j+1)\r\n        linePoints3.push(new THREE.Vector3(x*r, h, z*r))\r\n        linePoints3.push(new THREE.Vector3(x*r, -h, z*r))\r\n      }\r\n    }\r\n    const linesGeo3 = new THREE.BufferGeometry().setFromPoints( linePoints3 )\r\n    this.linesMesh3 = new THREE.LineSegments( linesGeo3, material3 )\r\n    this.linesMesh3.position.set(0, 0, 0)\r\n    this.cont2.add(this.linesMesh3)\r\n\r\n\r\n    // GLOBE\r\n    // https://stackoverflow.com/questions/20153705/three-js-wireframe-material-all-polygons-vs-just-edges\r\n    const wireMat = new THREE.LineBasicMaterial({ color: this.options.color })\r\n    const sphereGeom = new THREE.SphereGeometry( 18*this.options.size, 18, 14 )\r\n    const edges = new THREE.EdgesGeometry(sphereGeom)\r\n    this.sphere = new THREE.LineSegments( edges, wireMat )\r\n    this.sphere.position.set(0, 0, 0)\r\n    this.cont2.add(this.sphere)\r\n\r\n    this.cont2.rotation.x = -0.25\r\n\r\n\r\n  }\r\n\r\n  onUpdate() {\r\n    let diff\r\n    if (this.helper != null) {\r\n      this.helper.update()\r\n    }\r\n    if (this.controls != null) {\r\n      this.controls.update()\r\n    }\r\n\r\n    const c = this.camera\r\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\r\n      diff = c.tx - c.position.x\r\n      c.position.x += diff * 0.02\r\n    }\r\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\r\n      diff = c.ty - c.position.y\r\n      c.position.y += diff * 0.02\r\n    }\r\n    if (win && window.innerWidth < 480) {\r\n      c.lookAt( new THREE.Vector3( -10, 0, 0 ) )\r\n    } else if (win && window.innerWidth < 720) {\r\n      c.lookAt( new THREE.Vector3( -20, 0, 0 ) )\r\n    } else c.lookAt( new THREE.Vector3( -40, 0, 0 ) )\r\n    // c.near = 0.01\r\n    // c.updateProjectionMatrix()\r\n\r\n    let vertexpos = 0\r\n    let colorpos = 0\r\n    let numConnected = 0\r\n\r\n    const bgColor = new THREE.Color(this.options.backgroundColor)\r\n    const color = new THREE.Color(this.options.color)\r\n    const color2 = new THREE.Color(this.options.color2)\r\n    const diffColor = color.clone().sub(bgColor)\r\n\r\n    if (this.rayCaster) {\r\n      this.rayCaster.setFromCamera(new THREE.Vector2(this.rcMouseX,this.rcMouseY), this.camera)\r\n    }\r\n\r\n    if (this.linesMesh2) {\r\n      this.linesMesh2.rotation.z += 0.002\r\n      this.linesMesh2.rotation.x += 0.0008\r\n      this.linesMesh2.rotation.y += 0.0005\r\n    }\r\n    if (this.sphere) {\r\n      this.sphere.rotation.y += 0.002\r\n      this.linesMesh3.rotation.y -= 0.004\r\n    }\r\n\r\n    // # TEMPORARY RAY DRAWING\r\n    // pointA = @camera.position\r\n    // direction = @rayCaster.ray.direction\r\n    // direction.normalize()\r\n    // distance = 1000000 # at what distance to determine pointB\r\n    // pointB = new THREE.Vector3()\r\n    // pointB.addVectors( pointA, direction.multiplyScalar( distance ) )\r\n    // geometry = new THREE.Geometry()\r\n    // geometry.vertices.push( pointA )\r\n    // geometry.vertices.push( pointB )\r\n    // material = new THREE.LineBasicMaterial( { color : 0xffffff } )\r\n    // line = new THREE.Line( geometry, material )\r\n    // @scene.add( line )\r\n\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      let dist, distToMouse\r\n      const p = this.points[i]\r\n      // p.position.y += Math.sin(@t * 0.005 - 0.02 * p.ox + 0.015 * p.oz) * 0.02\r\n\r\n      if (this.rayCaster) {\r\n        distToMouse = this.rayCaster.ray.distanceToPoint(p.position)\r\n      } else {\r\n        distToMouse = 1000\r\n      }\r\n      const distClamp = distToMouse.clamp(5,15)\r\n      p.scale.z = ((15 - distClamp) * 0.25).clamp(1, 100)\r\n      p.scale.x = p.scale.y = p.scale.z\r\n\r\n      // if (p.r !== 0) {\r\n      //   let ang = Math.atan2( p.position.z, p.position.x )\r\n      //   dist = Math.sqrt( (p.position.z * p.position.z) + (p.position.x * p.position.x) )\r\n      //   // ang += 0.0005 * p.r\r\n      //   p.position.x = dist * Math.cos(ang)\r\n      //   p.position.z = dist * Math.sin(ang)\r\n      // }\r\n\r\n      p.position.y = 2 * Math.sin(\r\n        p.position.x/10 + this.t*0.01\r\n        + p.position.z/10 * 0.5\r\n      )\r\n\r\n        // p.position.x += Math.sin(@t * 0.01 + p.position.y) * 0.02\r\n        // p.position.z += Math.sin(@t * 0.01 - p.position.y) * 0.02\r\n\r\n      for (let j = i; j < this.points.length; j++) {\r\n        const p2 = this.points[j]\r\n        const dx = p.position.x - p2.position.x\r\n        const dy = p.position.y - p2.position.y\r\n        const dz = p.position.z - p2.position.z\r\n        dist = Math.sqrt( (dx * dx) + (dy * dy) + (dz * dz) )\r\n        if (dist < this.options.maxDistance) {\r\n          let lineColor\r\n          let alpha = (( 1.0 - (dist / this.options.maxDistance) ) * 2)\r\n          alpha = alpha.clamp(0, 1)\r\n          if (this.blending === 'additive') {\r\n            lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n          } else {\r\n            lineColor = bgColor.clone().lerp(color, alpha)\r\n          }\r\n          // if @blending == 'subtractive'\r\n          //   lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n\r\n          this.linePositions[ vertexpos++ ] = p.position.x\r\n          this.linePositions[ vertexpos++ ] = p.position.y\r\n          this.linePositions[ vertexpos++ ] = p.position.z\r\n          this.linePositions[ vertexpos++ ] = p2.position.x\r\n          this.linePositions[ vertexpos++ ] = p2.position.y\r\n          this.linePositions[ vertexpos++ ] = p2.position.z\r\n\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n\r\n          numConnected++\r\n        }\r\n      }\r\n    }\r\n    this.linesMesh.geometry.setDrawRange( 0, numConnected * 2 )\r\n    this.linesMesh.geometry.attributes.position.needsUpdate = true\r\n    this.linesMesh.geometry.attributes.color.needsUpdate = true\r\n    // @pointCloud.geometry.attributes.position.needsUpdate = true\r\n\r\n    // Update other colors\r\n    this.sphere.material.color.set(color)\r\n    this.linesMesh2.material.color.set(color2)\r\n    this.linesMesh3.material.color.set(color2)\r\n\r\n    return this.t * 0.001\r\n  }\r\n    // @cont.rotation.x += Math.sin(t) * 0.0001\r\n    // @cont.rotation.z += Math.cos(t) * 0.00007\r\n\r\n\r\n  onMouseMove(x,y) {\r\n    const c = this.camera\r\n    if (!c.oy) {\r\n      c.oy = c.position.y\r\n      c.ox = c.position.x\r\n      c.oz = c.position.z\r\n    }\r\n    const ang = Math.atan2(c.oz, c.ox)\r\n    const dist = Math.sqrt((c.oz*c.oz) + (c.ox*c.ox))\r\n    const tAng = ang + ((x-0.5) * 1.5 * (this.options.mouseCoeffX || 1))\r\n    c.tz = dist * Math.sin(tAng)\r\n    c.tx = dist * Math.cos(tAng)\r\n    c.ty = c.oy + ((y-0.5) * 80 * (this.options.mouseCoeffY || 1))\r\n\r\n    if (!this.rayCaster) {\r\n      // this.rayCaster = new THREE.Raycaster()\r\n    }\r\n    this.rcMouseX = (x * 2) - 1\r\n    this.rcMouseY = (- x * 2) + 1\r\n  }\r\n\r\n  onRestart() {\r\n    this.scene.remove( this.linesMesh )\r\n    this.points = []\r\n  }\r\n}\r\nEffect.initClass()\r\nexport default VANTA.register('GLOBE', Effect)\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}