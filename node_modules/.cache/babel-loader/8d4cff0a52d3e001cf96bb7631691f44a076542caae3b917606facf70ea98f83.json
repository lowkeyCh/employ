{"ast":null,"code":"// http://thebookofshaders.com/13/\n// Original effect by Patricio Gonzalez Vivo\n\nimport ShaderBase, { VANTA } from './_shaderBase.js';\nclass Fog extends ShaderBase {}\nexport default VANTA.register('FOG', Fog);\nFog.prototype.defaultOptions = {\n  highlightColor: 0xffc300,\n  // 0xaaffff\n  midtoneColor: 0xff1f00,\n  // 0x00002a\n  lowlightColor: 0x2d00ff,\n  // 0xaaaa7e\n  baseColor: 0xffebeb,\n  // 0x1a9eaa\n  blurFactor: 0.6,\n  speed: 1.0,\n  zoom: 1.0,\n  scale: 2,\n  scaleMobile: 4\n};\nFog.prototype.fragmentShader = `\\\nuniform vec2 iResolution;\nuniform vec2 iMouse;\nuniform float iTime;\n\nuniform float blurFactor;\nuniform vec3 baseColor;\nuniform vec3 lowlightColor;\nuniform vec3 midtoneColor;\nuniform vec3 highlightColor;\nuniform float zoom;\n\nfloat random (in vec2 _st) {\n  return fract(sin(dot(_st.xy,\n                     vec2(0.129898,0.78233)))*\n        437.585453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n  vec2 i = floor(_st);\n  vec2 f = fract(_st);\n\n  // Four corners in 2D of a tile\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n\n  vec2 u = f * f * (3.0 - 2.0 * f);\n\n  return mix(a, b, u.x) +\n          (c - a)* u.y * (1.0 - u.x) +\n          (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 6\n\nfloat fbm ( in vec2 _st) {\n  float v = 0.0;\n  float a = blurFactor;\n  vec2 shift = vec2(100.0);\n  // Rotate to reduce axial bias\n  mat2 rot = mat2(cos(0.5), sin(0.5),\n                  -sin(0.5), cos(0.50));\n  for (int i = 0; i < NUM_OCTAVES; ++i) {\n      v += a * noise(_st);\n      _st = rot * _st * 2.0 + shift;\n      a *= (1. - blurFactor);\n  }\n  return v;\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / iResolution.xy*3.;\n  st.x *= 0.7 * iResolution.x / iResolution.y ; // Still keep it more landscape than square\n  st *= zoom;\n\n  // st += st * abs(sin(iTime*0.1)*3.0);\n  vec3 color = vec3(0.0);\n\n  vec2 q = vec2(0.);\n  q.x = fbm( st + 0.00*iTime);\n  q.y = fbm( st + vec2(1.0));\n\n  vec2 dir = vec2(0.15,0.126);\n  vec2 r = vec2(0.);\n  r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ dir.x*iTime );\n  r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ dir.y*iTime);\n\n  float f = fbm(st+r);\n\n  color = mix(baseColor,\n              lowlightColor,\n              clamp((f*f)*4.0,0.0,1.0));\n\n  color = mix(color,\n              midtoneColor,\n              clamp(length(q),0.0,1.0));\n\n  color = mix(color,\n              highlightColor,\n              clamp(length(r.x),0.0,1.0));\n\n  vec3 finalColor = mix(baseColor, color, f*f*f+.6*f*f+.5*f);\n  gl_FragColor = vec4(finalColor,1.0);\n}\n`;","map":{"version":3,"names":["ShaderBase","VANTA","Fog","register","prototype","defaultOptions","highlightColor","midtoneColor","lowlightColor","baseColor","blurFactor","speed","zoom","scale","scaleMobile","fragmentShader"],"sources":["E:/专业综合实践与训练/employment/node_modules/vanta/src/vanta.fog.js"],"sourcesContent":["// http://thebookofshaders.com/13/\r\n// Original effect by Patricio Gonzalez Vivo\r\n\r\nimport ShaderBase, {VANTA} from './_shaderBase.js'\r\n\r\nclass Fog extends ShaderBase {}\r\nexport default VANTA.register('FOG', Fog)\r\n\r\nFog.prototype.defaultOptions = {\r\n  highlightColor: 0xffc300, // 0xaaffff\r\n  midtoneColor: 0xff1f00, // 0x00002a\r\n  lowlightColor: 0x2d00ff, // 0xaaaa7e\r\n  baseColor: 0xffebeb, // 0x1a9eaa\r\n  blurFactor: 0.6,\r\n  speed: 1.0,\r\n  zoom: 1.0,\r\n  scale: 2,\r\n  scaleMobile: 4\r\n};\r\n\r\nFog.prototype.fragmentShader = `\\\r\nuniform vec2 iResolution;\r\nuniform vec2 iMouse;\r\nuniform float iTime;\r\n\r\nuniform float blurFactor;\r\nuniform vec3 baseColor;\r\nuniform vec3 lowlightColor;\r\nuniform vec3 midtoneColor;\r\nuniform vec3 highlightColor;\r\nuniform float zoom;\r\n\r\nfloat random (in vec2 _st) {\r\n  return fract(sin(dot(_st.xy,\r\n                     vec2(0.129898,0.78233)))*\r\n        437.585453123);\r\n}\r\n\r\n// Based on Morgan McGuire @morgan3d\r\n// https://www.shadertoy.com/view/4dS3Wd\r\nfloat noise (in vec2 _st) {\r\n  vec2 i = floor(_st);\r\n  vec2 f = fract(_st);\r\n\r\n  // Four corners in 2D of a tile\r\n  float a = random(i);\r\n  float b = random(i + vec2(1.0, 0.0));\r\n  float c = random(i + vec2(0.0, 1.0));\r\n  float d = random(i + vec2(1.0, 1.0));\r\n\r\n  vec2 u = f * f * (3.0 - 2.0 * f);\r\n\r\n  return mix(a, b, u.x) +\r\n          (c - a)* u.y * (1.0 - u.x) +\r\n          (d - b) * u.x * u.y;\r\n}\r\n\r\n#define NUM_OCTAVES 6\r\n\r\nfloat fbm ( in vec2 _st) {\r\n  float v = 0.0;\r\n  float a = blurFactor;\r\n  vec2 shift = vec2(100.0);\r\n  // Rotate to reduce axial bias\r\n  mat2 rot = mat2(cos(0.5), sin(0.5),\r\n                  -sin(0.5), cos(0.50));\r\n  for (int i = 0; i < NUM_OCTAVES; ++i) {\r\n      v += a * noise(_st);\r\n      _st = rot * _st * 2.0 + shift;\r\n      a *= (1. - blurFactor);\r\n  }\r\n  return v;\r\n}\r\n\r\nvoid main() {\r\n  vec2 st = gl_FragCoord.xy / iResolution.xy*3.;\r\n  st.x *= 0.7 * iResolution.x / iResolution.y ; // Still keep it more landscape than square\r\n  st *= zoom;\r\n\r\n  // st += st * abs(sin(iTime*0.1)*3.0);\r\n  vec3 color = vec3(0.0);\r\n\r\n  vec2 q = vec2(0.);\r\n  q.x = fbm( st + 0.00*iTime);\r\n  q.y = fbm( st + vec2(1.0));\r\n\r\n  vec2 dir = vec2(0.15,0.126);\r\n  vec2 r = vec2(0.);\r\n  r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ dir.x*iTime );\r\n  r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ dir.y*iTime);\r\n\r\n  float f = fbm(st+r);\r\n\r\n  color = mix(baseColor,\r\n              lowlightColor,\r\n              clamp((f*f)*4.0,0.0,1.0));\r\n\r\n  color = mix(color,\r\n              midtoneColor,\r\n              clamp(length(q),0.0,1.0));\r\n\r\n  color = mix(color,\r\n              highlightColor,\r\n              clamp(length(r.x),0.0,1.0));\r\n\r\n  vec3 finalColor = mix(baseColor, color, f*f*f+.6*f*f+.5*f);\r\n  gl_FragColor = vec4(finalColor,1.0);\r\n}\r\n`;\r\n"],"mappings":"AAAA;AACA;;AAEA,OAAOA,UAAU,IAAGC,KAAK,QAAO,kBAAkB;AAElD,MAAMC,GAAG,SAASF,UAAU,CAAC;AAC7B,eAAeC,KAAK,CAACE,QAAQ,CAAC,KAAK,EAAED,GAAG,CAAC;AAEzCA,GAAG,CAACE,SAAS,CAACC,cAAc,GAAG;EAC7BC,cAAc,EAAE,QAAQ;EAAE;EAC1BC,YAAY,EAAE,QAAQ;EAAE;EACxBC,aAAa,EAAE,QAAQ;EAAE;EACzBC,SAAS,EAAE,QAAQ;EAAE;EACrBC,UAAU,EAAE,GAAG;EACfC,KAAK,EAAE,GAAG;EACVC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,CAAC;EACRC,WAAW,EAAE;AACf,CAAC;AAEDZ,GAAG,CAACE,SAAS,CAACW,cAAc,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}